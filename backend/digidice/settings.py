"""
Django settings for digidice project.

Generated by 'django-admin startproject' using Django 4.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from os import getenv
from pathlib import Path
from secrets import token_urlsafe

#: Build paths inside the project like this: ``BASE_DIR / ...``.
BASE_DIR = Path(__file__).resolve().parents[1]

# Generate the key file if it doesn't exist
key_file = BASE_DIR / 'keys' / 'secret.key'
if not key_file.exists():
    key_file.write_text(token_urlsafe(32))
    key_file.chmod(0o400)

#: | A secret key used to provide cryptographic signing.
#: | SECURITY WARNING: this *must* be kept secret!
SECRET_KEY = key_file.read_text().rstrip()

del key_file

#: | A boolean that turns debug mode on/off.
#: | SECURITY WARNING: don't turn this on in production!
DEBUG = bool(getenv('DEBUG'))

#: A list of hosts that this site can serve.
ALLOWED_HOSTS = ['.localhost', '127.0.0.1']

#: A list of strings designating all applications
#: that are enabled in this Django installation.
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'users',
]

#: A list of middleware to use.
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'digidice.middleware.CorsMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

#: Database settings dictionary.
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'GDPR',
        'CHARSET': 'utf8mb4',
        'OPTIONS': {
            'read_default_file': str(BASE_DIR / '.my.cnf')
        }
    }
}

#: A string representing the full Python import path to the root URLconf.
ROOT_URLCONF = 'digidice.urls'

#: Store message data in the session.
MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'

#: A list containing the settings for all template engines to be used.
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ]
        }
    }
]

#: The full Python path of the WSGI application object for the built-in server.
WSGI_APPLICATION = 'digidice.wsgi.application'

#: The time zone of this installation.
TIME_ZONE = 'Europe/Athens'

#: Enable timezone-aware datetimes.
USE_TZ = True

#: Disable the translation system.
USE_I18N = False

#: URL that handles the static files.
STATIC_URL = 'static/'

#: The directory that contains static files.
STATIC_ROOT = getenv('STATIC_ROOT', BASE_DIR / 'vendor' / 'static')

#: Default primary key field type.
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

#: The model to use to represent a user.
AUTH_USER_MODEL = 'users.User'

#: A list of hash functions that can be used for passwords.
PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.Argon2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
]

#: A list of validators that are used to check the strength of passwords.
AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]

#: Store session data in the cache and persist to the database.
SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'

#: Expire the session when the user closes the browser.
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

#: Prevent the session cookie from being sent in cross-site requests.
SESSION_COOKIE_SAMESITE = 'Strict'

#: Prevent the CSRF cookie from being sent in cross-site requests.
CSRF_COOKIE_SAMESITE = 'Strict'

#: Redirect all non-HTTPS requests to HTTPS.
SECURE_SSL_REDIRECT = True

#: HTTP header/value combination that signifies a secure request.
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

#: Ensure that the CSRF cookie is only sent with an HTTPS connection.
CSRF_COOKIE_SECURE = True

#: Ensure that the session cookie is only sent with an HTTPS connection.
SESSION_COOKIE_SECURE = True

#: A list of trusted origins for unsafe requests (e.g. POST).
CSRF_TRUSTED_ORIGINS = ['https://frontend.localhost']

#: Rest framework settings dictionary.
#: See https://www.django-rest-framework.org/api-guide/settings/
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle',
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '2/s',
        'user': '5/s'
    },
    'URL_FORMAT_OVERRIDE': None
}
if DEBUG:
    REST_FRAMEWORK['DEFAULT_PARSER_CLASSES'].append(
        'rest_framework.parsers.MultiPartParser'
    )
    REST_FRAMEWORK['DEFAULT_RENDERER_CLASSES'].append(
        'rest_framework.renderers.BrowsableAPIRenderer'
    )

#: JWT settings dictionary.
#: See https://django-rest-framework-simplejwt.readthedocs.io/en/latest/settings.html
SIMPLE_JWT = {
    'UPDATE_LAST_LOGIN': True,
    'ALGORITHM': 'RS256',
    'SIGNING_KEY': (BASE_DIR / 'keys' / 'private.pem').read_text(),
    'VERIFYING_KEY': (BASE_DIR / 'keys' / 'public.pem').read_text(),
    'ISSUER': 'digidice'
}
